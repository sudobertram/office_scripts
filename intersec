#!/usr/bin/env python

import csv
from enum import Enum
from collections import defaultdict

class IntersectionMethod(Enum):
    INNER = 'inner'
    OUTER = 'outer'
    LEFT = 'left'
    RIGHT = 'right'

class FileIntersection:
    def __init__(self, method, input_files, output_file):
        self.method = method
        self.input_files = input_files
        self.output_file = output_file

    def intersect_files(self):
        data = defaultdict(list)

        # Read data from input files
        for file_path in self.input_files:
            with open(file_path, 'r') as file:
                reader = csv.DictReader(file)
                for row in reader:
                    key = tuple(row.values())
                    data[key].append(file_path)

        # Perform intersection based on the chosen method
        result = []
        for key, sources in data.items():
            if self.method == IntersectionMethod.INNER.value and len(sources) == len(self.input_files):
                result.append(key)
            elif self.method == IntersectionMethod.OUTER.value and len(sources) == 1:
                result.append(key)
            elif self.method == IntersectionMethod.LEFT.value and len(sources) >= 1:
                result.append(key)
            elif self.method == IntersectionMethod.RIGHT.value and len(sources) == len(self.input_files) - 1:
                result.append(key)

        # Write the result to the output file
        with open(self.output_file, 'w', newline='') as output_file:
            writer = csv.writer(output_file)
            writer.writerow(list(data.keys())[0])  # Write header

            for row in result:
                writer.writerow(row)

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description='File Intersection Script')
    parser.add_argument('method', choices=[method.value for method in IntersectionMethod],
                        help='Intersection method: inner, outer, left, right')
    parser.add_argument('input_files', nargs='+', help='Input file paths')
    parser.add_argument('output_file', help='Output file name')

    args = parser.parse_args()

    # Create an instance of FileIntersection and perform the intersection
    file_intersection = FileIntersection(args.method, args.input_files, args.output_file)
    file_intersection.intersect_files()
